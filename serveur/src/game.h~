#include <pthread.h>
#ifndef GAME_H_INCLUDED
#define GAME_H_INCLUDED
#define MAX_CONNECTED_PLAYER 10
#define TIME_TOUR 60 * 3

extern int getTour();
extern int getSession();

extern void setTour(int x);
extern void setSession(int x);

typedef struct joueur{
  int sock;
  char nom[100];
  int score;
  int nbTrouve;
  char traj[256][17];
  char mots[256][17];
  char badExit;
} joueur;

/*SALE*/
/*static pthread_mutex_t mutJoueur = PTHREAD_MUTEX_INITIALIZER;
static pthread_cond_t condEmptyJoueur = PTHREAD_COND_INITIALIZER;

static pthread_mutex_t mutTrouve = PTHREAD_MUTEX_INITIALIZER;
static pthread_cond_t condEmptyTrouve = PTHREAD_COND_INITIALIZER;

static pthread_mutex_t mutVerif = PTHREAD_MUTEX_INITIALIZER;
static pthread_cond_t condEmptyVerif = PTHREAD_COND_INITIALIZER;
*//**/

extern joueur* getJoueurByName(char * name,joueur** tab);

extern joueur* getJoueurByNum(int x,joueur** tab);

extern joueur* getJoueurByNameNotSafe(char * name,joueur** tab);

extern joueur* getJoueurByNumNotSafe(int x, joueur** tab);

extern joueur* getJoueurBySocket(int sock, joueur** tab);

extern joueur* getJoueurBySocketNotSafe(int sock, joueur** tab);

extern void addJoueur(joueur* j, joueur** tab );

extern void addNewJoueur(int sock, char* nom, joueur** tab );
extern void setBadExit(joueur *j);

//SAFE
extern void removeJoueur(joueur * j,joueur** tab);
extern void removeJoueurByName(char * name,joueur** tab);
extern void removeJoueurBySocket(int sock,joueur** tab);

extern char addTrouveToPlayer(int sockId, char* mot, char * traj, joueur** tab);

extern void debug_printAllPlayer(joueur ** tab);

extern joueur** initJoueurArray();
extern char* getScores(joueur ** tab); //tofree SAFE
extern int getNbPlayer();
extern void * job_AddTrouve(void * arg);
extern void emptyPlayerProposition(joueur** tab);
extern void resetPlayerScore(joueur** tab);

extern char *getScoresNotSafe(joueur** tab); //tofree
extern void emptyPlayerPropositionNotSafe(joueur** tab);
extern int strlenToScore(int length);
#endif
